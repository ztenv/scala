// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typedef.proto

package com.xunce.pb;

public final class TypeDefCls {
    private TypeDefCls() {}
    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }
    public interface TypeDefOrBuilder extends
            // @@protoc_insertion_point(interface_extends:xc.type.TypeDef)
            com.google.protobuf.MessageOrBuilder {
    }
    /**
     * Protobuf type {@code xc.type.TypeDef}
     */
    public  static final class TypeDef extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:xc.type.TypeDef)
            TypeDefOrBuilder {
        private static final long serialVersionUID = 0L;
        // Use TypeDef.newBuilder() to construct.
        private TypeDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }
        private TypeDef() {
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private TypeDef(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return com.xunce.pb.TypeDefCls.internal_static_xc_type_TypeDef_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return com.xunce.pb.TypeDefCls.internal_static_xc_type_TypeDef_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            com.xunce.pb.TypeDefCls.TypeDef.class, com.xunce.pb.TypeDefCls.TypeDef.Builder.class);
        }

        /**
         * Protobuf enum {@code xc.type.TypeDef.TaskType}
         */
        public enum TaskType
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>TASK_UNKNOWN = 0;</code>
             */
            TASK_UNKNOWN(0),
            /**
             * <code>TASK_TIMER = 1;</code>
             */
            TASK_TIMER(1),
            /**
             * <code>TASK_FILE = 2;</code>
             */
            TASK_FILE(2),
            UNRECOGNIZED(-1),
            ;

            /**
             * <code>TASK_UNKNOWN = 0;</code>
             */
            public static final int TASK_UNKNOWN_VALUE = 0;
            /**
             * <code>TASK_TIMER = 1;</code>
             */
            public static final int TASK_TIMER_VALUE = 1;
            /**
             * <code>TASK_FILE = 2;</code>
             */
            public static final int TASK_FILE_VALUE = 2;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new java.lang.IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static TaskType valueOf(int value) {
                return forNumber(value);
            }

            public static TaskType forNumber(int value) {
                switch (value) {
                    case 0: return TASK_UNKNOWN;
                    case 1: return TASK_TIMER;
                    case 2: return TASK_FILE;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<TaskType>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    TaskType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<TaskType>() {
                        public TaskType findValueByNumber(int number) {
                            return TaskType.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return com.xunce.pb.TypeDefCls.TypeDef.getDescriptor().getEnumTypes().get(0);
            }

            private static final TaskType[] VALUES = values();

            public static TaskType valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private TaskType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:xc.type.TypeDef.TaskType)
        }

        /**
         * Protobuf enum {@code xc.type.TypeDef.Exchange}
         */
        public enum Exchange
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>EX_UNKNOWN = 0;</code>
             */
            EX_UNKNOWN(0),
            /**
             * <pre>
             * 上交所
             * </pre>
             *
             * <code>EX_SH = 1;</code>
             */
            EX_SH(1),
            /**
             * <pre>
             * 深交所
             * </pre>
             *
             * <code>EX_SZ = 2;</code>
             */
            EX_SZ(2),
            /**
             * <pre>
             *中金所
             * </pre>
             *
             * <code>EX_CFFEX = 3;</code>
             */
            EX_CFFEX(3),
            /**
             * <pre>
             * CTP行情
             * </pre>
             *
             * <code>EX_CTP = 4;</code>
             */
            EX_CTP(4),
            /**
             * <pre>
             *上期所
             * </pre>
             *
             * <code>EX_SHFE = 5;</code>
             */
            EX_SHFE(5),
            /**
             * <pre>
             *郑商所
             * </pre>
             *
             * <code>EX_CZCE = 6;</code>
             */
            EX_CZCE(6),
            /**
             * <pre>
             *大商所
             * </pre>
             *
             * <code>EX_DCE = 7;</code>
             */
            EX_DCE(7),
            /**
             * <pre>
             * 香港联交所
             * </pre>
             *
             * <code>EX_HK = 8;</code>
             */
            EX_HK(8),
            /**
             * <pre>
             * 沪港通
             * </pre>
             *
             * <code>EX_HKSH = 9;</code>
             */
            EX_HKSH(9),
            /**
             * <pre>
             * 深港通
             * </pre>
             *
             * <code>EX_HKSZ = 10;</code>
             */
            EX_HKSZ(10),
            UNRECOGNIZED(-1),
            ;

            /**
             * <code>EX_UNKNOWN = 0;</code>
             */
            public static final int EX_UNKNOWN_VALUE = 0;
            /**
             * <pre>
             * 上交所
             * </pre>
             *
             * <code>EX_SH = 1;</code>
             */
            public static final int EX_SH_VALUE = 1;
            /**
             * <pre>
             * 深交所
             * </pre>
             *
             * <code>EX_SZ = 2;</code>
             */
            public static final int EX_SZ_VALUE = 2;
            /**
             * <pre>
             *中金所
             * </pre>
             *
             * <code>EX_CFFEX = 3;</code>
             */
            public static final int EX_CFFEX_VALUE = 3;
            /**
             * <pre>
             * CTP行情
             * </pre>
             *
             * <code>EX_CTP = 4;</code>
             */
            public static final int EX_CTP_VALUE = 4;
            /**
             * <pre>
             *上期所
             * </pre>
             *
             * <code>EX_SHFE = 5;</code>
             */
            public static final int EX_SHFE_VALUE = 5;
            /**
             * <pre>
             *郑商所
             * </pre>
             *
             * <code>EX_CZCE = 6;</code>
             */
            public static final int EX_CZCE_VALUE = 6;
            /**
             * <pre>
             *大商所
             * </pre>
             *
             * <code>EX_DCE = 7;</code>
             */
            public static final int EX_DCE_VALUE = 7;
            /**
             * <pre>
             * 香港联交所
             * </pre>
             *
             * <code>EX_HK = 8;</code>
             */
            public static final int EX_HK_VALUE = 8;
            /**
             * <pre>
             * 沪港通
             * </pre>
             *
             * <code>EX_HKSH = 9;</code>
             */
            public static final int EX_HKSH_VALUE = 9;
            /**
             * <pre>
             * 深港通
             * </pre>
             *
             * <code>EX_HKSZ = 10;</code>
             */
            public static final int EX_HKSZ_VALUE = 10;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new java.lang.IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static Exchange valueOf(int value) {
                return forNumber(value);
            }

            public static Exchange forNumber(int value) {
                switch (value) {
                    case 0: return EX_UNKNOWN;
                    case 1: return EX_SH;
                    case 2: return EX_SZ;
                    case 3: return EX_CFFEX;
                    case 4: return EX_CTP;
                    case 5: return EX_SHFE;
                    case 6: return EX_CZCE;
                    case 7: return EX_DCE;
                    case 8: return EX_HK;
                    case 9: return EX_HKSH;
                    case 10: return EX_HKSZ;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Exchange>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    Exchange> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Exchange>() {
                        public Exchange findValueByNumber(int number) {
                            return Exchange.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return com.xunce.pb.TypeDefCls.TypeDef.getDescriptor().getEnumTypes().get(1);
            }

            private static final Exchange[] VALUES = values();

            public static Exchange valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private Exchange(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:xc.type.TypeDef.Exchange)
        }

        /**
         * Protobuf enum {@code xc.type.TypeDef.SecurityType}
         */
        public enum SecurityType
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>TYPE_UNKNOWN = 0;</code>
             */
            TYPE_UNKNOWN(0),
            /**
             * <pre>
             *股票
             * </pre>
             *
             * <code>TYPE_STOCK = 1000000;</code>
             */
            TYPE_STOCK(1000000),
            /**
             * <pre>
             *基金
             * </pre>
             *
             * <code>TYPE_FUND = 1000100;</code>
             */
            TYPE_FUND(1000100),
            /**
             * <pre>
             *债券
             * </pre>
             *
             * <code>TYPE_BOND = 1000200;</code>
             */
            TYPE_BOND(1000200),
            /**
             * <pre>
             *权证
             * </pre>
             *
             * <code>TYPE_WARRANT = 1000300;</code>
             */
            TYPE_WARRANT(1000300),
            /**
             * <pre>
             *期货
             * </pre>
             *
             * <code>TYPE_FUTURE = 1000400;</code>
             */
            TYPE_FUTURE(1000400),
            /**
             * <pre>
             *期权
             * </pre>
             *
             * <code>TYPE_OPTION = 1000500;</code>
             */
            TYPE_OPTION(1000500),
            /**
             * <pre>
             *回购/现金等价物
             * </pre>
             *
             * <code>TYPE_REPO = 1000600;</code>
             */
            TYPE_REPO(1000600),
            /**
             * <pre>
             *指数
             * </pre>
             *
             * <code>TYPE_INDEX = 1000700;</code>
             */
            TYPE_INDEX(1000700),
            /**
             * <pre>
             *场外收益互换
             * </pre>
             *
             * <code>TYPE_OTCSWAP = 1000800;</code>
             */
            TYPE_OTCSWAP(1000800),
            /**
             * <pre>
             *场外其他资产
             * </pre>
             *
             * <code>TYPE_OTCOTHER = 1000900;</code>
             */
            TYPE_OTCOTHER(1000900),
            /**
             * <pre>
             *其他
             * </pre>
             *
             * <code>TYPE_OTHER = 1009000;</code>
             */
            TYPE_OTHER(1009000),
            UNRECOGNIZED(-1),
            ;

            /**
             * <code>TYPE_UNKNOWN = 0;</code>
             */
            public static final int TYPE_UNKNOWN_VALUE = 0;
            /**
             * <pre>
             *股票
             * </pre>
             *
             * <code>TYPE_STOCK = 1000000;</code>
             */
            public static final int TYPE_STOCK_VALUE = 1000000;
            /**
             * <pre>
             *基金
             * </pre>
             *
             * <code>TYPE_FUND = 1000100;</code>
             */
            public static final int TYPE_FUND_VALUE = 1000100;
            /**
             * <pre>
             *债券
             * </pre>
             *
             * <code>TYPE_BOND = 1000200;</code>
             */
            public static final int TYPE_BOND_VALUE = 1000200;
            /**
             * <pre>
             *权证
             * </pre>
             *
             * <code>TYPE_WARRANT = 1000300;</code>
             */
            public static final int TYPE_WARRANT_VALUE = 1000300;
            /**
             * <pre>
             *期货
             * </pre>
             *
             * <code>TYPE_FUTURE = 1000400;</code>
             */
            public static final int TYPE_FUTURE_VALUE = 1000400;
            /**
             * <pre>
             *期权
             * </pre>
             *
             * <code>TYPE_OPTION = 1000500;</code>
             */
            public static final int TYPE_OPTION_VALUE = 1000500;
            /**
             * <pre>
             *回购/现金等价物
             * </pre>
             *
             * <code>TYPE_REPO = 1000600;</code>
             */
            public static final int TYPE_REPO_VALUE = 1000600;
            /**
             * <pre>
             *指数
             * </pre>
             *
             * <code>TYPE_INDEX = 1000700;</code>
             */
            public static final int TYPE_INDEX_VALUE = 1000700;
            /**
             * <pre>
             *场外收益互换
             * </pre>
             *
             * <code>TYPE_OTCSWAP = 1000800;</code>
             */
            public static final int TYPE_OTCSWAP_VALUE = 1000800;
            /**
             * <pre>
             *场外其他资产
             * </pre>
             *
             * <code>TYPE_OTCOTHER = 1000900;</code>
             */
            public static final int TYPE_OTCOTHER_VALUE = 1000900;
            /**
             * <pre>
             *其他
             * </pre>
             *
             * <code>TYPE_OTHER = 1009000;</code>
             */
            public static final int TYPE_OTHER_VALUE = 1009000;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new java.lang.IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static SecurityType valueOf(int value) {
                return forNumber(value);
            }

            public static SecurityType forNumber(int value) {
                switch (value) {
                    case 0: return TYPE_UNKNOWN;
                    case 1000000: return TYPE_STOCK;
                    case 1000100: return TYPE_FUND;
                    case 1000200: return TYPE_BOND;
                    case 1000300: return TYPE_WARRANT;
                    case 1000400: return TYPE_FUTURE;
                    case 1000500: return TYPE_OPTION;
                    case 1000600: return TYPE_REPO;
                    case 1000700: return TYPE_INDEX;
                    case 1000800: return TYPE_OTCSWAP;
                    case 1000900: return TYPE_OTCOTHER;
                    case 1009000: return TYPE_OTHER;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<SecurityType>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    SecurityType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<SecurityType>() {
                        public SecurityType findValueByNumber(int number) {
                            return SecurityType.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return com.xunce.pb.TypeDefCls.TypeDef.getDescriptor().getEnumTypes().get(2);
            }

            private static final SecurityType[] VALUES = values();

            public static SecurityType valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private SecurityType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:xc.type.TypeDef.SecurityType)
        }

        /**
         * Protobuf enum {@code xc.type.TypeDef.ErrorType}
         */
        public enum ErrorType
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>ERROR_UNKNOWN = 0;</code>
             */
            ERROR_UNKNOWN(0),
            /**
             * <code>ERROR_UNSUPPOTED = 1;</code>
             */
            ERROR_UNSUPPOTED(1),
            UNRECOGNIZED(-1),
            ;

            /**
             * <code>ERROR_UNKNOWN = 0;</code>
             */
            public static final int ERROR_UNKNOWN_VALUE = 0;
            /**
             * <code>ERROR_UNSUPPOTED = 1;</code>
             */
            public static final int ERROR_UNSUPPOTED_VALUE = 1;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new java.lang.IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static ErrorType valueOf(int value) {
                return forNumber(value);
            }

            public static ErrorType forNumber(int value) {
                switch (value) {
                    case 0: return ERROR_UNKNOWN;
                    case 1: return ERROR_UNSUPPOTED;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<ErrorType>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    ErrorType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<ErrorType>() {
                        public ErrorType findValueByNumber(int number) {
                            return ErrorType.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return com.xunce.pb.TypeDefCls.TypeDef.getDescriptor().getEnumTypes().get(3);
            }

            private static final ErrorType[] VALUES = values();

            public static ErrorType valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private ErrorType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:xc.type.TypeDef.ErrorType)
        }

        /**
         * Protobuf enum {@code xc.type.TypeDef.RunState}
         */
        public enum RunState
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <pre>
             *未执行
             * </pre>
             *
             * <code>UNEXECUTED = 0;</code>
             */
            UNEXECUTED(0),
            /**
             * <pre>
             *执行中
             * </pre>
             *
             * <code>EXECUTING = 1;</code>
             */
            EXECUTING(1),
            /**
             * <pre>
             *执行失败
             * </pre>
             *
             * <code>EXECFAILURE = 2;</code>
             */
            EXECFAILURE(2),
            /**
             * <pre>
             *完成
             * </pre>
             *
             * <code>COMPLETED = 3;</code>
             */
            COMPLETED(3),
            /**
             * <pre>
             *队列等待
             * </pre>
             *
             * <code>QUEUEWAITING = 4;</code>
             */
            QUEUEWAITING(4),
            /**
             * <pre>
             *心跳超时
             * </pre>
             *
             * <code>HEARTBEATTIMEOUT = 5;</code>
             */
            HEARTBEATTIMEOUT(5),
            /**
             * <pre>
             *成功
             * </pre>
             *
             * <code>SUCCESS = 6;</code>
             */
            SUCCESS(6),
            /**
             * <pre>
             *源数据超时
             * </pre>
             *
             * <code>SOURCETIMEOUT = 7;</code>
             */
            SOURCETIMEOUT(7),
            UNRECOGNIZED(-1),
            ;

            /**
             * <pre>
             *未执行
             * </pre>
             *
             * <code>UNEXECUTED = 0;</code>
             */
            public static final int UNEXECUTED_VALUE = 0;
            /**
             * <pre>
             *执行中
             * </pre>
             *
             * <code>EXECUTING = 1;</code>
             */
            public static final int EXECUTING_VALUE = 1;
            /**
             * <pre>
             *执行失败
             * </pre>
             *
             * <code>EXECFAILURE = 2;</code>
             */
            public static final int EXECFAILURE_VALUE = 2;
            /**
             * <pre>
             *完成
             * </pre>
             *
             * <code>COMPLETED = 3;</code>
             */
            public static final int COMPLETED_VALUE = 3;
            /**
             * <pre>
             *队列等待
             * </pre>
             *
             * <code>QUEUEWAITING = 4;</code>
             */
            public static final int QUEUEWAITING_VALUE = 4;
            /**
             * <pre>
             *心跳超时
             * </pre>
             *
             * <code>HEARTBEATTIMEOUT = 5;</code>
             */
            public static final int HEARTBEATTIMEOUT_VALUE = 5;
            /**
             * <pre>
             *成功
             * </pre>
             *
             * <code>SUCCESS = 6;</code>
             */
            public static final int SUCCESS_VALUE = 6;
            /**
             * <pre>
             *源数据超时
             * </pre>
             *
             * <code>SOURCETIMEOUT = 7;</code>
             */
            public static final int SOURCETIMEOUT_VALUE = 7;


            public final int getNumber() {
                if (this == UNRECOGNIZED) {
                    throw new java.lang.IllegalArgumentException(
                            "Can't get the number of an unknown enum value.");
                }
                return value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static RunState valueOf(int value) {
                return forNumber(value);
            }

            public static RunState forNumber(int value) {
                switch (value) {
                    case 0: return UNEXECUTED;
                    case 1: return EXECUTING;
                    case 2: return EXECFAILURE;
                    case 3: return COMPLETED;
                    case 4: return QUEUEWAITING;
                    case 5: return HEARTBEATTIMEOUT;
                    case 6: return SUCCESS;
                    case 7: return SOURCETIMEOUT;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<RunState>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    RunState> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<RunState>() {
                        public RunState findValueByNumber(int number) {
                            return RunState.forNumber(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return com.xunce.pb.TypeDefCls.TypeDef.getDescriptor().getEnumTypes().get(4);
            }

            private static final RunState[] VALUES = values();

            public static RunState valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                if (desc.getIndex() == -1) {
                    return UNRECOGNIZED;
                }
                return VALUES[desc.getIndex()];
            }

            private final int value;

            private RunState(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:xc.type.TypeDef.RunState)
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof com.xunce.pb.TypeDefCls.TypeDef)) {
                return super.equals(obj);
            }
            com.xunce.pb.TypeDefCls.TypeDef other = (com.xunce.pb.TypeDefCls.TypeDef) obj;

            boolean result = true;
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }
        public static com.xunce.pb.TypeDefCls.TypeDef parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.xunce.pb.TypeDefCls.TypeDef prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code xc.type.TypeDef}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:xc.type.TypeDef)
                com.xunce.pb.TypeDefCls.TypeDefOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return com.xunce.pb.TypeDefCls.internal_static_xc_type_TypeDef_descriptor;
            }

            @java.lang.Override
            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return com.xunce.pb.TypeDefCls.internal_static_xc_type_TypeDef_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                com.xunce.pb.TypeDefCls.TypeDef.class, com.xunce.pb.TypeDefCls.TypeDef.Builder.class);
            }

            // Construct using com.xunce.pb.TypeDefCls.TypeDef.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }
            @java.lang.Override
            public Builder clear() {
                super.clear();
                return this;
            }

            @java.lang.Override
            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return com.xunce.pb.TypeDefCls.internal_static_xc_type_TypeDef_descriptor;
            }

            @java.lang.Override
            public com.xunce.pb.TypeDefCls.TypeDef getDefaultInstanceForType() {
                return com.xunce.pb.TypeDefCls.TypeDef.getDefaultInstance();
            }

            @java.lang.Override
            public com.xunce.pb.TypeDefCls.TypeDef build() {
                com.xunce.pb.TypeDefCls.TypeDef result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @java.lang.Override
            public com.xunce.pb.TypeDefCls.TypeDef buildPartial() {
                com.xunce.pb.TypeDefCls.TypeDef result = new com.xunce.pb.TypeDefCls.TypeDef(this);
                onBuilt();
                return result;
            }

            @java.lang.Override
            public Builder clone() {
                return (Builder) super.clone();
            }
            @java.lang.Override
            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    java.lang.Object value) {
                return (Builder) super.setField(field, value);
            }
            @java.lang.Override
            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }
            @java.lang.Override
            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }
            @java.lang.Override
            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, java.lang.Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }
            @java.lang.Override
            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    java.lang.Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }
            @java.lang.Override
            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.xunce.pb.TypeDefCls.TypeDef) {
                    return mergeFrom((com.xunce.pb.TypeDefCls.TypeDef)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.xunce.pb.TypeDefCls.TypeDef other) {
                if (other == com.xunce.pb.TypeDefCls.TypeDef.getDefaultInstance()) return this;
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            @java.lang.Override
            public final boolean isInitialized() {
                return true;
            }

            @java.lang.Override
            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.xunce.pb.TypeDefCls.TypeDef parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.xunce.pb.TypeDefCls.TypeDef) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            @java.lang.Override
            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            @java.lang.Override
            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:xc.type.TypeDef)
        }

        // @@protoc_insertion_point(class_scope:xc.type.TypeDef)
        private static final com.xunce.pb.TypeDefCls.TypeDef DEFAULT_INSTANCE;
        static {
            DEFAULT_INSTANCE = new com.xunce.pb.TypeDefCls.TypeDef();
        }

        public static com.xunce.pb.TypeDefCls.TypeDef getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<TypeDef>
                PARSER = new com.google.protobuf.AbstractParser<TypeDef>() {
            @java.lang.Override
            public TypeDef parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new TypeDef(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<TypeDef> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<TypeDef> getParserForType() {
            return PARSER;
        }

        @java.lang.Override
        public com.xunce.pb.TypeDefCls.TypeDef getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_xc_type_TypeDef_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_xc_type_TypeDef_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }
    private static  com.google.protobuf.Descriptors.FileDescriptor
            descriptor;
    static {
        java.lang.String[] descriptorData = {
                "\n\rtypedef.proto\022\007xc.type\"\227\005\n\007TypeDef\";\n\010" +
                        "TaskType\022\020\n\014TASK_UNKNOWN\020\000\022\016\n\nTASK_TIMER" +
                        "\020\001\022\r\n\tTASK_FILE\020\002\"\225\001\n\010Exchange\022\016\n\nEX_UNK" +
                        "NOWN\020\000\022\t\n\005EX_SH\020\001\022\t\n\005EX_SZ\020\002\022\014\n\010EX_CFFEX" +
                        "\020\003\022\n\n\006EX_CTP\020\004\022\013\n\007EX_SHFE\020\005\022\013\n\007EX_CZCE\020\006" +
                        "\022\n\n\006EX_DCE\020\007\022\t\n\005EX_HK\020\010\022\013\n\007EX_HKSH\020\t\022\013\n\007" +
                        "EX_HKSZ\020\n\"\354\001\n\014SecurityType\022\020\n\014TYPE_UNKNO" +
                        "WN\020\000\022\020\n\nTYPE_STOCK\020\300\204=\022\017\n\tTYPE_FUND\020\244\205=\022" +
                        "\017\n\tTYPE_BOND\020\210\206=\022\022\n\014TYPE_WARRANT\020\354\206=\022\021\n\013" +
                        "TYPE_FUTURE\020\320\207=\022\021\n\013TYPE_OPTION\020\264\210=\022\017\n\tTY" +
                        "PE_REPO\020\230\211=\022\020\n\nTYPE_INDEX\020\374\211=\022\022\n\014TYPE_OT" +
                        "CSWAP\020\340\212=\022\023\n\rTYPE_OTCOTHER\020\304\213=\022\020\n\nTYPE_O" +
                        "THER\020\350\312=\"4\n\tErrorType\022\021\n\rERROR_UNKNOWN\020\000" +
                        "\022\024\n\020ERROR_UNSUPPOTED\020\001\"\221\001\n\010RunState\022\016\n\nU" +
                        "NEXECUTED\020\000\022\r\n\tEXECUTING\020\001\022\017\n\013EXECFAILUR" +
                        "E\020\002\022\r\n\tCOMPLETED\020\003\022\020\n\014QUEUEWAITING\020\004\022\024\n\020" +
                        "HEARTBEATTIMEOUT\020\005\022\013\n\007SUCCESS\020\006\022\021\n\rSOURC" +
                        "ETIMEOUT\020\007B\032\n\014com.xunce.pbB\nTypeDefClsb\006" +
                        "proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[] {
                        }, assigner);
        internal_static_xc_type_TypeDef_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_xc_type_TypeDef_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_xc_type_TypeDef_descriptor,
                new java.lang.String[] { });
    }

    // @@protoc_insertion_point(outer_class_scope)
}
